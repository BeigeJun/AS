#define _WIN32_WINNT 0x500
#include <windows.h>

LRESULT CALLBACK WndProc(HWND,UINT,WPARAM,LPARAM);
HINSTANCE g_hInst;
LPSTR lpszClass="Panning";
#define      ROW         1000   //   메모장의 세로 크기
#define      COL         100   //   메모장의 가로 크기
int APIENTRY WinMain(HINSTANCE hInstance,HINSTANCE hPrevInstance
         ,LPSTR lpszCmdParam,int nCmdShow)
{
    HWND hwnd;
    MSG Message;
    WNDCLASS WndClass;
    g_hInst=hInstance;
    
    if(!hPrevInstance) {
        WndClass.cbClsExtra=0;
        WndClass.cbWndExtra=0;
        WndClass.hbrBackground=(HBRUSH)GetStockObject(WHITE_BRUSH);
        WndClass.hCursor=LoadCursor(NULL,IDC_ARROW);
        WndClass.hIcon=LoadIcon(NULL,IDI_APPLICATION);
        WndClass.hInstance=hInstance;
        WndClass.lpfnWndProc=(WNDPROC)WndProc;
        WndClass.lpszClassName=lpszClass;
        WndClass.lpszMenuName=NULL;
        WndClass.style=CS_HREDRAW | CS_VREDRAW;
        RegisterClass(&WndClass);
    }
    hwnd=CreateWindow(lpszClass,lpszClass,WS_OVERLAPPEDWINDOW | WS_HSCROLL | WS_VSCROLL,
         CW_USEDEFAULT,CW_USEDEFAULT,640,480,
         NULL,(HMENU)NULL,hInstance,NULL);
    ShowWindow(hwnd,nCmdShow);
    
    while(GetMessage(&Message,0,0,0)) {
        TranslateMessage(&Message);
        DispatchMessage(&Message);
    }
    return Message.wParam;
}
HDC hDC;
HWND hHorzScroll;            // 수평 스크롤 바 컨트롤
HWND hVertScroll;            // 수직 스크롤 바 컨트롤

int xPos = 0;
int	yPos = 0;                // 현재 위치
int yMax,xMax;                // 최대 크기
int xInc, yInc;
RECT RT;

static TCHAR NOTE[ROW][COL] = { 0, };   //   메모장으로 사용할 이차원 배열
static size_t Line = 0;      //   메모장(이차원 배열)에서의 문자를 저장할 행 위치
static size_t Word = 0;      //   메모장(이차원 배열)에서의 문자를 저장할 열 위치
int F_Line = 0;
int BF_Word = 0;
int insert_ox = 0;
HANDLE f;
int answer;

int xM = 0;
int yM = 0;

SCROLLINFO xScrol, yScrol;

HANDLE hFile;
DWORD dwRead;
OPENFILENAME OFN, SFN;
char lpstrFile[MAX_PATH]="";
char str[ROW];

SIZE size;

LRESULT CALLBACK WndProc(HWND hWnd, UINT iMessage, WPARAM wParam, LPARAM lParam)
{
        int i;
        TCHAR str[128];
        HDC hdc;
        PAINTSTRUCT ps;
        int xInc, yInc;

        switch ( iMessage )
        {
        case WM_CREATE:
                xPos = 0;
                yPos = 0;


                return 0;

      case WM_HSCROLL:
                xInc = 0;
                switch (LOWORD(wParam))
                {
                case SB_LINELEFT:
                        xInc = -1;
                        break;
                case SB_LINERIGHT:
                        xInc = 1;
                        break;
                case SB_PAGELEFT:
                        xInc = -20;
                        break;
                case SB_PAGERIGHT:
                        xInc = 20;
                        break;
                case SB_THUMBTRACK:
                        xInc = HIWORD(wParam) - xPos;
                        break;
                }
                // 새로운 위치는 최소한 0 이상
                if ( xPos + xInc < 0 ) xInc = -xPos;

                // 새로운 위치는 최대한 xMax 이하
                if ( xPos + xInc > xMax ) xInc = xMax - xPos;

                // 새로운 위치 계산
                xPos = xPos + xInc;

                // 스크롤시키고 썸 위치를 다시 계산한다.
                ScrollWindow(hWnd, -xInc, 0, NULL, NULL);
                SetScrollPos(hWnd, SB_HORZ, xPos, TRUE);
                return 0;

        case WM_VSCROLL:
                yInc = 0;
                switch ( LOWORD(wParam) )
                {
                case SB_LINEUP:
                        yInc = -1;
                        break;
                case SB_LINEDOWN:
                        yInc = 1;
                        break;
                case SB_PAGEUP:
                        yInc = -20;
                        break;
                case SB_PAGEDOWN:
                        yInc = 20;
                        break;
                case SB_THUMBTRACK:
                        yInc = HIWORD(wParam) - yPos;
                        break;
                }
                // 새로운 위치는 최소한 0 이상
                if ( yPos + yInc < 0 ) yInc = -yPos;

                // 새로운 위치는 최대한 yMax 이하
                if ( yPos + yInc > yMax ) yInc = yMax - yPos;
                // yInc = max(0yPos, min(yInc, yMax - yPos));
               
                // 새로운 위치 계산
                yPos = yPos + yInc;
           
                // 스크롤시키고 썸 위치를 다시 계산한다.
                ScrollWindow(hWnd, 0, -yInc, NULL, NULL);
                SetScrollPos(hWnd, SB_VERT, yPos, TRUE);
                return 0;
/*
		case WM_SIZE:
                xMax = 1024 - LOWORD(lParam);
                yMax = 768 - HIWORD(lParam);
                SetScrollRange(hWnd, SB_VERT, 0, yMax, TRUE);
                SetScrollPos(hWnd, SB_VERT, 0, TRUE);
                SetScrollRange(hWnd, SB_HORZ, 0, xMax, TRUE);
                SetScrollPos(hWnd, SB_HORZ, 0, TRUE);
                return 0;
				*/
		case WM_SIZE:
				GetClientRect(hWnd, &RT);
				xScrol.cbSize = sizeof(SCROLLINFO);
				xScrol.fMask = SIF_ALL | SIF_DISABLENOSCROLL;
	            xScrol.nMin = 0;
				xScrol.nMax = RT.right;
				xScrol.nPage = RT.right;

				yScrol.cbSize = sizeof(SCROLLINFO);
				yScrol.fMask = SIF_ALL | SIF_DISABLENOSCROLL;
	            yScrol.nMin = 0;
				yScrol.nMax = RT.bottom;
				yScrol.nPage = RT.bottom;

				SetScrollInfo(hWnd, SB_VERT,&xScrol,TRUE);
				SetScrollPos(hWnd, SB_VERT, xPos, TRUE);

				SetScrollInfo(hWnd, SB_HORZ,&yScrol,TRUE);
				SetScrollPos(hWnd, SB_HORZ, yPos, TRUE);
				return 0;

		 case WM_CHAR:
      {
         switch(wParam)
         {
//////////////////////////////////////////////////////////////////////////////////////////////////////////
            case VK_RETURN:   //   엔터 키가 눌린 경우
				{
				  if(Line != F_Line)
				  {
						for(int i = F_Line ; i != Line; i--)
						{
							for(int j = lstrlen(NOTE[i]) ; j > 0 ; j-- )
							 {
								NOTE[i+1][j-1] = NOTE[i][j-1];
								NOTE[i][j-1]=NULL;
							 }
						}
						if(lstrlen(NOTE[Line]) != Word)
						{
							for(int i = lstrlen(NOTE[Line]) ; i > Word ; i--)
							{
								NOTE[Line+1][i-Word-1] = NOTE[Line][i-1];
								NOTE[Line][i-1]=NULL;
							}
						}
				  }
				  else
				  {
					  if(lstrlen(NOTE[Line]) != Word)
						{
							for(int i = lstrlen(NOTE[Line]) ; i > Word ; i--)
							{
								NOTE[Line+1][i-Word-1] = NOTE[Line][i-1];
								NOTE[Line][i-1]=NULL;
							}
						}
					  else
					  {}
				  }
				  Line++; F_Line++; Word = 0;
				  GetTextExtentPoint(hDC, NOTE[Line], Word, &size);
                  SetCaretPos(size.cx, Line*16);
                  InvalidateRect( hWnd, NULL, TRUE );
                  return 0;
				}
//////////////////////////////////////////////////////////////////////////////////////////////////////////

            case VK_BACK:   //   백스페이스 키가 눌린 경우
            {
			
               if ( Line == 0 && Word == 0 )
               {return 0;}


               if( Word == 0 )
               {                                              //중간줄 삭제
					
						BF_Word = lstrlen(NOTE[Line-1]);

						for(int i = lstrlen(NOTE[Line]); i >= 0 ; i--)
						{
							NOTE[Line-1][i+BF_Word] = NOTE[Line][i];
							NOTE[Line][i] = NULL;
							
						}
						if(F_Line>Line)
						{
							for(int i = Line; F_Line > i ; i++)
							{
								for(int j = lstrlen(NOTE[i+1]) ; 0 <= j ; j--)
								{
									NOTE[i][j] = NOTE[i+1][j];
									NOTE[i+1][j] = NULL;
								}
							}
						}
						F_Line--;
						Line--;
						Word = BF_Word;
						GetTextExtentPoint(hDC, NOTE[Line],Word, &size);
						SetCaretPos(size.cx, Line*16);
						InvalidateRect( hWnd, NULL, TRUE );
						return 0;
               }

               else
               {
				  if(lstrlen(NOTE[Line])==Word)
				  {
					NOTE[Line][--Word] = NULL;
				  }
				  else
				  {
					  for(int i = Word - 1; i < lstrlen(NOTE[Line]) ; i++)
					  {
						NOTE[Line][i] = NOTE[Line][i+1];
					  }
					  NOTE[Line][lstrlen(NOTE[Line])] = NULL;
					  Word--;
				  }
				  GetTextExtentPoint(hDC, NOTE[Line], Word, &size);
			      SetCaretPos(size.cx, Line*16);
                  InvalidateRect( hWnd, NULL, TRUE );
                  return 0;
               }
            }

			case VK_TAB:
				{
					if(Word == lstrlen(NOTE[Line]))
					{
						for(int i = 0 ; i < 8 ; i++)
						{
							NOTE[Line][Word + i] = ' ';
						}
					}
					else
					{
						for(int i = lstrlen(NOTE[Line]) ; i > Word ; i--)
						{
							NOTE[Line][i+7] = NOTE[Line][i-1];
						}
						for(int i = 0 ; i < 8 ; i++)
						{
							NOTE[Line][Word + i] = ' ';
						}
					}
					Word = Word + 8;
					GetTextExtentPoint(hDC, NOTE[Line], Word, &size);
					SetCaretPos(size.cx, Line*16);
					InvalidateRect(hWnd, NULL, TRUE);
					break;
				}


			default:
				if(lstrlen(NOTE[Line])==Word)   // 맨 끝에서 입력할 때
				{
					if( Line < ROW )
					{
						NOTE[Line][Word] = (TCHAR)wParam;         
						NOTE[Line][Word + 1] = NULL;         
						Word++;
			
            
				   /*   막바지일때 아무것도 안하기 */
						if ( Word == COL )
						{
							return 0;			      
						}
					}
				 }
				 else if(lstrlen(NOTE[Line])!=Word)       //중간에서 입력할때
				 {
					 if(insert_ox == 0)
					 {
						 for(int i = lstrlen(NOTE[Line]) ; i>Word ; i--)
						 {
							 NOTE[Line][i] = NOTE[Line][i-1];
						 }
						 NOTE[Line][Word] = (TCHAR)wParam;                  
						 Word++;
						 InvalidateRect( hWnd, NULL, TRUE );
					 }
					 else
					 {
						 NOTE[Line][Word] = (TCHAR)wParam;
						 Word++;
						 InvalidateRect( hWnd, NULL, TRUE );
					 }
			 
			 
				 }
				 GetTextExtentPoint(hDC, NOTE[Line], Word, &size);
				 SetCaretPos(size.cx, Line*16);
			     InvalidateRect( hWnd, NULL, TRUE );
				 break;
			}
      }

	case WM_PAINT:
      {
		 hDC = BeginPaint( hWnd, &ps );
         //   이차원 배열의 각 행들이 문자열이므로, 행을 탐색해서 문자열 출력
         for( int i = 0; i < ROW; i++ )
         {
            TextOut( hDC, 0,16*i , NOTE[i], lstrlen( NOTE[i] ) );
         }
         EndPaint( hWnd, &ps );
         break;
      }
        case WM_DESTROY:
                PostQuitMessage(0);
                return 0;
        }
        return(DefWindowProc(hWnd, iMessage, wParam, lParam));
}
