#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include <stdlib.h>
#include"LinkedList.h"
#include"Node.h"
#include"Def.h"

int main() {
	char a;

	int number = 0;

	printf("관리자를 만드시겠습니까? x입력시 종료(o/x) : ");
	scanf("%c", &a);
	if (a == 'x')
	{
		printf("종료합니다.");
		return 0;
	}
	else if (a == 'o')
	{
		printf("관리자 master가 생성되었습니다.\n");
	}
	else
	{
		printf("잘못입력하셨습니다. 프로그램을 종료합니다.");
		return 0;
	}
	LinkedList* master = Create();
	while (1)
	{
		printf(" ------------기능을 선택해 주십쇼--------------\n");
		printf("|1.맨 앞에 노드 추가                           |\n");
		printf("|2.맨 뒤에 노드 추가                           |\n");
		printf("|3.리스트의 노드들 순회                        |\n");
		printf("|4.관리자 지우기(끝내기)                       |\n");
		printf("|5.맨 앞 노드 지우기                           |\n");
		printf("|6.맨 뒤 노드 지우기                           |\n");
		printf("|7.모든 노드 지우기                            |\n");
		printf("|8.지정 노드 지우기                            |\n");
		printf("|9.임의 노드 수정                              |\n");
		printf("|10.단일 선형 탐색                             |\n");
		printf("|11.버블정렬                                   |\n");
		printf("|12.삽입정렬                                   |\n");
		printf(" ----------------------------------------------\n");
		printf("입력 : ");
		scanf("%d", &number);


		if (number == 1) {
			unsigned int append_num = 0;
			printf("추가할 노드의 고유 숫자를 입력하시오: ");
			scanf("%d", &append_num);
			if (append_num<= 2147483647 && append_num>=0)
			{
				AppendFromHead(master, append_num);
				Traversal(master);
				continue;
			}
			printf("2147483647이하의 양의 정수를 입력해주십시오\n");
		}
		else if (number == 2) {
			unsigned int append_num = 0;
			printf("추가할 노드의 고유 숫자를 입력하시오: ");
			scanf("%d", &append_num);
			if (append_num <= 2147483647 && append_num >= 0)
			{
				AppendFromTail(master, append_num);
				Traversal(master);
				continue;
			}
			printf("2147483647이하의 양의 정수를 입력해주십시오\n");
		}
		else if (number == 3) {
			Traversal(master);
		}
		else if (number == 4) {
			Destroy(master);
			printf("종료합니다.");
			return 0;
		}
		else if (number == 5) {
			DeleteFromHead(master);
		}
		else if (number == 6) {
			DeleteFromTail(master);
		}
		else if (number == 7) {
			DeleteAll(master);
		}
		else if (number == 8) {
			unsigned int append_num = 0;
			printf("몇번째 노드를 삭제하겠습니까? : ");
			scanf("%d", &append_num);
			Delete(master,append_num);
		}
		else if (number == 9) {
			unsigned int aNum;
			unsigned int bNum;
			printf("몇번째 노드를 변경하시겠습니까? : ");
			scanf("%d", &aNum);
			printf("노드의 고유 번호를 무엇으로 바꾸시겠습니까? : ");
			scanf("%d", &bNum);
			Modify(master, aNum, bNum);
		}
		else if (number == 10) {
			unsigned int Num;
			printf("찾을 고유 숫자를 입력하십시오 : ");
			scanf("%d", &Num);
			LinearSearchByUnique(master, Num);
		}
		else if (number == 11)
		{ SortByBubble(master); }
		else if (number == 12)
		{
			SortByInsertion(master);
		}
		else if (number == 13)
		{
			SortBySelection(master);
		}
		else if (number == 14)
		{
			int target;
			printf("찾을 고유 숫자를 입력하십시오 : ");
			scanf("%d", &target);
			BinarySearchByUnique(master, target);
		}
		else {
			printf("잘못된 접근입니다.\n");
		}
		Traversal(master);
	}
}
