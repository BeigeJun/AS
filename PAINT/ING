
#include <windows.h>
#include <tchar.h>

#define		X_POSITION		0			//	윈도우 창이 생성될 x좌표
#define		Y_POSITION		0			//	윈도우 창이 생성될 y좌표
#define		WIDTH			600			//	윈도우 창의 가로 크기
#define		HEIGHT			400			//	윈도우 창의 세로 크기

#define		Left_X_Pos				0	//	그림 그릴 영역의 좌측상단 x좌표
#define		Left_Y_Pos				0	//	그림 그릴 영역의 좌측상단 y좌표
#define		Right_X_Pos				400	//	그림 그릴 영역의 우측하단 x좌표
#define		Right_Y_Pos				350	//	그림 그릴 영역의 우측하단 y좌표

enum ENUM_CHILD_ID
{
	CHILD_LISTBOX_FontWidth,	//	폰트의 두께에 대한 리스트 박스 
	CHILD_LISTBOX_Color			//	폰트의 색상에 대한 리스트 박스 
};

HWND g_hListBox_FontWidth;		//	폰트의 두께에 대한 리스트 박스	
HWND g_hListBox_Color;			//	폰트의 색상에 대한 리스트 박스 
int Font_Width = 2;				//	폰트의 두께에 대한 리스트 박스에서 선택된 폰트의 두께
HBRUSH hMyBrush = NULL;
int B_Color = RGB(0,0,0);		//	RGB(0,0,0)은 색상이 black이다. 

LRESULT CALLBACK WndProc( HWND, UINT , WPARAM, LPARAM);

int WINAPI WinMain( HINSTANCE hInstance, HINSTANCE hPrevInst, LPSTR strCmdLine, int nShowCmd )
{
	WNDCLASSEX wcex;
	memset( &wcex, 0, sizeof(wcex) );

	wcex.cbSize = sizeof(wcex);
	wcex.style = CS_HREDRAW | CS_VREDRAW;
	wcex.hbrBackground = ( HBRUSH )GetStockObject(WHITE_BRUSH);
	wcex.hCursor = LoadCursor(NULL, IDC_ARROW );
	wcex.hIcon = LoadIcon( NULL, IDI_APPLICATION );
	wcex.hInstance = hInstance;
	wcex.cbClsExtra = 0;
	wcex.cbWndExtra = 0;
	wcex.hIconSm = NULL;
	wcex.lpszMenuName = NULL;
	wcex.lpfnWndProc = WndProc;
	wcex.lpszClassName = "MyWindow";
	RegisterClassEx(&wcex);
	
	/*	윈도우 창의 설정	*/
	HWND hWnd = CreateWindow( "MyWindow", "그림판", WS_OVERLAPPEDWINDOW | WS_THICKFRAME, 
		X_POSITION, Y_POSITION, WIDTH, HEIGHT, NULL, NULL, hInstance, NULL);		

	if( hWnd == NULL )
	{
		MessageBox(NULL, "윈도우 생성 실패", "에러", MB_ICONERROR | MB_OK );
		return -1;
	}

	ShowWindow( hWnd, SW_SHOW );

	MSG msg;
	memset( &msg, 0, sizeof(msg) );
	while( GetMessage( &msg, NULL, 0, 0 ) )
	{
		TranslateMessage( &msg );
		DispatchMessage(&msg);
	}
	return 0;
}

LRESULT CALLBACK WndProc( HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam )
{
	static int x,y;				//	마우스 좌표를 얻기 위한 변수
	static bool bDraw = false;	//	마우스의 눌림 혹은 떼짐을 판단하는 변수

	switch(uMsg)
	{
		case WM_CREATE:
		{
			CreateWindow( "static", "폰트두께", WS_CHILD | WS_VISIBLE, 410, 0, 460, 100, hWnd, NULL, NULL, NULL );
			
			g_hListBox_FontWidth = CreateWindow( "ListBox", "ListBox", WS_CHILD | WS_VISIBLE | WS_BORDER | LBS_NOTIFY, 
										410, 20, 440, 100, hWnd, (HMENU)CHILD_LISTBOX_FontWidth, NULL, NULL );
			
			SendMessage( g_hListBox_FontWidth, LB_ADDSTRING, 0, (LPARAM)L"Default" );
			SendMessage( g_hListBox_FontWidth, LB_ADDSTRING, 1, (LPARAM)L"5Pt" );
			SendMessage( g_hListBox_FontWidth, LB_ADDSTRING, 2, (LPARAM)L"9Pt" );
			SendMessage( g_hListBox_FontWidth, LB_ADDSTRING, 3, (LPARAM)L"13Pt" );
			
			//	g_hListBox_FontWidth 리스트 박스의 첫 번째 목록을 선택 상태로 둔다.
			SendMessage( g_hListBox_FontWidth, LB_SETCURSEL, 0, 0 );

			CreateWindow( "static", "폰트색상", WS_CHILD | WS_VISIBLE, 410, 130, 460, 300, hWnd, NULL, NULL, NULL );
			
			g_hListBox_Color = CreateWindow( "ListBox", "ListBox", WS_CHILD | WS_VISIBLE | WS_BORDER | LBS_NOTIFY, 
										410, 150, 440, 300, hWnd, (HMENU)CHILD_LISTBOX_Color, NULL, NULL );

			SendMessage( g_hListBox_Color, LB_ADDSTRING, 0, (LPARAM)L"Default" );
			SendMessage( g_hListBox_Color, LB_ADDSTRING, 1, (LPARAM)L"Red" );
			SendMessage( g_hListBox_Color, LB_ADDSTRING, 2, (LPARAM)L"Blue" );
			SendMessage( g_hListBox_Color, LB_ADDSTRING, 3, (LPARAM)L"Green" );
			
			//	g_hListBox_Color 리스트 박스의 첫 번째 목록을 선택 상태로 둔다.
			SendMessage( g_hListBox_Color, LB_SETCURSEL, 0, 0 );

			break;
		}
	
		case WM_COMMAND:	// 키가 눌려진 경우 대한 case이다.
		{
			switch( LOWORD( wParam ) )
			{
				case CHILD_LISTBOX_Color :		//	차일드 윈도우의 컬러 리스트박스를 건드린 경우
				{
					switch( HIWORD( wParam ) )
					{
						case LBN_SELCHANGE:		
						{
							int Color_Select = SendMessage( g_hListBox_Color, LB_GETCURSEL, 0, 0 );
								
							switch( Color_Select )
							{
								case 0:	B_Color = RGB( 0, 0, 0 );		break;	//	Black
								case 1:	B_Color = RGB( 255, 0, 0 ); 	break;	//	Red
								case 2:	B_Color = RGB( 0, 0, 255 ); 	break;	//	Blue
								case 3:	B_Color = RGB( 0, 255, 0 ); 	break;	//	Green
							}
							
							hMyBrush = CreateSolidBrush( B_Color );

							break;
						}
					}
					
					break;
				}

				case CHILD_LISTBOX_FontWidth:	//	차일드 윈도우의 폰트 리스트박스를 건드린 경우
				{
					switch( HIWORD( wParam ) )
					{
						case LBN_SELCHANGE:		
						{
							int FW_Select = SendMessage( g_hListBox_FontWidth, LB_GETCURSEL, 0, 0 );
							
							switch( FW_Select )
							{
								case 0:	Font_Width = 2;		break;	
								case 1:	Font_Width = 5;		break;		
								case 2:	Font_Width = 9;		break;		
								case 3:	Font_Width = 13;	break;	
							}

							break;
						}
					}
				
					break;
				}
			}

			break;
		}

		//	그림 그리기 시작
		case WM_LBUTTONDOWN:	//	마우스 누름
		{
			//	좌표를 얻어와야 한다.
			x = LOWORD(lParam);
			y = HIWORD(lParam);
			
			//	마우스가 눌려 있다.
			bDraw = true;

			break;
		}
		
		//	그림 그리는 중( 마우스가 눌린 상태에서만 )
		case WM_MOUSEMOVE:		//	마우스 이동
		{
			if( bDraw == true )	// 마우스가 눌려있는가?
			{
				// DC를 얻어온다.
				HDC hDC = GetDC( hWnd );
				
				//	아래의 if조건은 그리는 범위를 박스 안에서만 그려지게 하기 위해서.
				if( (Left_X_Pos <= x && x <= Right_X_Pos) 
					&& (y >= Left_Y_Pos && y <= Right_Y_Pos) )
				{
						HPEN hMyPen = CreatePen(PS_SOLID, Font_Width, B_Color );
						HPEN hPrevPen = NULL;

						hPrevPen = (HPEN)SelectObject(hDC, hMyPen);
						MoveToEx( hDC, x, y, NULL );
						
						x = LOWORD(lParam); 
						y = HIWORD(lParam);

					//	마우스가 무가 영역안 범위에서만 그려지게 하자.
					LineTo( hDC, x, y);
					
					ReleaseDC( hWnd, hDC );
				}
			}

			break;
		}
		
		//	그림 그리기 끝
		case WM_LBUTTONUP:		//	마우스 똄
		{
			//	마우스가 눌려있다가 떼진 경우이므로, 그리는 동작이 끝났음을 의미
			bDraw = false;

			break;
		}

		case WM_DESTROY:
		{
			PostQuitMessage(0);
			break;
		}	
	}
	return DefWindowProc( hWnd, uMsg, wParam, lParam );
}
/더블버퍼링공부하기
