#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include <stdlib.h>
#include"LinkedList.h"
#include"Node.h"

LinkedList* Create()
{
	 LinkedList * _ptList = (LinkedList*)calloc(1, sizeof(LinkedList));
	 _ptList->m_pHead = _ptList->m_pTail;
	 _ptList->m_pTail = _ptList->m_pHead;
	 _ptList->m_pCurrent = NULL;
	 _ptList->m_uCount = 0;
	 return _ptList;
}

void Destroy(LinkedList* _ptList)
{
	free(_ptList);
}

Node* GetNode(int _Object)
{
	Node* pNode = (Node*)malloc(sizeof(Node));
	pNode->m_pNext = pNode;
	pNode->m_Previous = pNode;
	pNode->m_iObject = _Object;
	return pNode;
}

Node* Read(LinkedList* _ptList, unsigned int num)
{
	Node* view = _ptList->m_pHead;
	for (int i = 1; i < num; i++)
	{
		view = view->m_pNext;
	}
	printf("%d 번째 노드의 값은 %d", num, view->m_iObject);
	return 0;
}

void Traversal(LinkedList* _ptList)
{
	
	Node* view = _ptList->m_pHead;


	for (int i = 0; i != _ptList->m_uCount; i++) {
		printf("%d번째 값 : %d\n", i+1,view->m_iObject);
		view = view->m_pNext;
	}
	printf("\n");

}

Node* AppendFromHead(LinkedList* _ptList, int _iObject)
{
	_ptList->m_pCurrent = GetNode(_iObject);

	if (_ptList->m_pHead) {
		_ptList->m_pCurrent->m_pNext = _ptList->m_pHead;
		_ptList->m_pHead->m_Previous = _ptList->m_pCurrent;
	}
	else
		_ptList->m_pTail = _ptList->m_pCurrent;

	_ptList->m_pHead = _ptList->m_pCurrent;
	(_ptList->m_uCount)++;
	printf("맨 앞에 %d 추가\n", _iObject);
	return 0;
}

Node* AppendFromTail(LinkedList* _ptList, int _iObject)
{
	_ptList->m_pCurrent = GetNode(_iObject);

	if (_ptList->m_pTail) {
		_ptList->m_pTail->m_pNext = _ptList->m_pCurrent;
		_ptList->m_pCurrent->m_Previous = _ptList->m_pTail;
	}
	else
		_ptList->m_pHead = _ptList->m_pCurrent;

	_ptList->m_pTail = _ptList->m_pCurrent;
	(_ptList->m_uCount)++;
	printf("맨 뒤에 %d 추가\n", _iObject);
	return 0;
}

Node* DeleteFromHead(LinkedList* _ptList)
{
	if (_ptList->m_uCount < 1)
	{
		printf("노드의 개수가 0개입니다.\n");
		return 0;
	}
	Node* pointer;
	pointer = _ptList->m_pHead;
	pointer = pointer->m_pNext;
	pointer->m_Previous = pointer;

	pointer = _ptList->m_pHead;
	_ptList->m_pHead = pointer->m_pNext;
	(_ptList->m_uCount)--;
	free(pointer);
	return 0;
}

Node* DeleteFromTail(LinkedList* _ptList)
{
	if (_ptList->m_uCount < 1)
	{
		printf("노드의 개수가 0개입니다.\n");
		return 0;
	}
	Node* pointer;
	pointer = _ptList->m_pTail;
	pointer = pointer->m_Previous;
	pointer->m_pNext = pointer;

	pointer = _ptList->m_pTail;
	_ptList->m_pTail = pointer->m_Previous;
	free(pointer);
	(_ptList->m_uCount)--;
	return 0;
}

void DeleteAll(LinkedList* _ptList)
{
	Node* First;
	First = _ptList->m_pHead;
	for (int i = _ptList->m_uCount; i > 2; i--)
	{
		First = First->m_pNext;
		free(First->m_Previous);
	}
	free(First);
	_ptList->m_pHead = _ptList->m_pTail;
	_ptList->m_pTail = _ptList->m_pHead;
	_ptList->m_uCount = 0;
}


int main() {
	char a;
	int number = 0;

	printf("관리자를 만드시겠습니까? x입력시 종료(o/x) : ");
	scanf("%c", &a);
	if (a == 'x')
	{
		printf("종료합니다.");
		return 0;
	}
	else if (a == 'o')
	{
		printf("관리자 master가 생성되었습니다.\n");
	}
	else
	{
		printf("잘못입력하셨습니다. 프로그램을 종료합니다.");
		return 0;
	}
	LinkedList* master = Create();
	while (1)
	{
		printf("------------------------------------------------\n");
		printf("-------------기능을 선택해 주십쇼---------------\n");
		printf("-1.맨 앞에 노드 추가                           -\n");
		printf("-2.맨 뒤에 노드 추가                           -\n");
		printf("-3.리스트의 노드들 순회                        -\n");
		printf("-4.관리자 지우기(끝내기)                      - \n");
		printf("-5.맨 앞 노드 지우기                          - \n");
		printf("-6.맨 뒤 노드 지우기                          - \n");
		printf("------------------------------------------------\n");
		printf("입력 : ");
		scanf("%d", &number);


		if (number == 1) {
			int append_num = 0;
			printf("추가할 노드의 고유 숫자를 입력하시오: ");
			scanf("%d", &append_num);
			AppendFromHead(master, append_num);
		}
		else if (number == 2) {
			int append_num = 0; 
			printf("추가할 노드의 고유 숫자를 입력하시오: ");
			scanf("%d", &append_num);
			AppendFromTail(master, append_num);
		}
		else if (number == 3) {
			Traversal(master);
		}
		else if (number == 4) {
			Destroy(master);
			printf("종료합니다.");
			return 0;
		}
		else if (number == 5) {
			DeleteFromHead(master);
		}
		else if (number == 6) {
			DeleteFromTail(master);
		}
		else if (number == 7) {
			DeleteAll(master);
		}
		else {
			printf("잘못된 접근입니다.");
		}
	}
}
